// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String      @id @default(uuid()) @db.Uuid
  email             String      @unique
  password          String?
  token             String?     @db.Uuid @unique
  name              String
  playlists         Playlist[]
  trackPlaylist     TrackPlaylist[]
  votes             TrackVote[]
  invitSent         Invitation[] @relation("InvitSent")
  invitReceived     Invitation[] @relation("InviteReceived")
  members           Members[]
  confirmationCode  ConfirmationCode?
  passwordChange    PasswordChange?
  friends           Friend[]        @relation("friend")
  friendsWith       Friend[]        @relation("user")
  friendRequest     FriendRequest[] @relation("friend_request")
  friendInvitation  FriendRequest[] @relation("friend_invitation")
  createdAt         DateTime    @default(now()) @map("created_at")
  updatedAt         DateTime    @default(now()) @map("updated_at")
}

model PasswordChange {
  id            String      @id @default(uuid()) @db.Uuid
  user          User        @relation(fields: [userId], references: [id])
  userId        String      @map("user_id") @db.Uuid @unique
  password      String
  code          Int
  createdAt     DateTime    @default(now()) @map("created_at")
}

enum PlaylistType {
  PRIVATE
  PUBLIC
}

enum PlaylistOrderType {
  VOTE
  POSITION
}

model Playlist {
  id            String      @id @default(uuid()) @db.Uuid
  type          PlaylistType
  name          String
  password      String?
  user          User        @relation(fields: [userId], references: [id])
  userId        String      @map("user_id") @db.Uuid
  orderType     PlaylistOrderType @map("order_type") @default(VOTE)
  lat           String?
  lon           String?
  startSession  DateTime?
  endSession    DateTime?
  tracks        TrackPlaylist[]
  votes         TrackVote[]
  invitations   Invitation[]
  members       Members[]
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @default(now()) @map("updated_at") 
}

model TrackPlaylist {
  id            String      @id @default(uuid()) @db.Uuid
  trackId       String      @map("tracK_id")
  trackTitle    String      @map("track_title")
  trackPreview  String      @map("track_preview")
  albumCover    String      @map("album_cover")
  user          User        @relation(fields: [userId], references: [id])
  userId        String      @map("user_id") @db.Uuid
  playlist      Playlist    @relation(fields: [playlistId], references: [id])
  playlistId    String      @map("playlist_id") @db.Uuid
  votes         TrackVote[]
  position      Int
  alreadyPlayed Boolean     @default(false) @map("already_played")
  voteCount     Int         @default(0)
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @default(now()) @map("updated_at")
}

model TrackVote {
  id            String      @id @default(uuid()) @db.Uuid
  playlist      Playlist    @relation(fields: [playlistId], references: [id])
  playlistId    String      @map("playlist_id") @db.Uuid
  user          User        @relation(fields: [userId], references: [id])
  userId        String      @map("user_id") @db.Uuid
  track         TrackPlaylist @relation(fields: [trackId], references: [id])
  trackId       String      @map("track_id") @db.Uuid
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @default(now()) @map("updated_at") 
}

model Invitation { 
  id            String      @id @default(uuid()) @db.Uuid
  playlist      Playlist    @relation(fields: [playlistId], references: [id])
  playlistId    String      @map("playlist_id") @db.Uuid
  invitedBy     User        @relation("InvitSent", fields: [invitedById], references: [id])
  invitedById   String      @map("invited_by_id") @db.Uuid
  invitedUser   User        @relation("InviteReceived", fields: [invitedUserId], references: [id])
  invitedUserId String      @map("invited_USER_ID") @db.Uuid
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @default(now()) @map("updated_at")
}

model Members {
  id            String      @id @default(uuid()) @db.Uuid
  playlist      Playlist    @relation(fields: [playlistId], references: [id])
  playlistId    String      @map("playlist_id") @db.Uuid
  user          User        @relation(fields: [userId], references: [id])
  userId        String      @map("user_id") @db.Uuid
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @default(now()) @map("updated_at")
}

model ConfirmationCode {
  id            String      @id @default(uuid()) @db.Uuid
  user          User        @relation(fields: [userId], references: [id])
  userId        String      @map("user_id") @db.Uuid @unique
  code          Int
  createdAt     DateTime    @default(now()) @map("created_at")
}

enum FriendRequestState {
  PENDING
  ACCEPTED
  DENIED
}

model FriendRequest {
  id            String      @id @default(uuid()) @db.Uuid
  requestedBy   User        @relation("friend_request", fields: [requestedById], references: [id])
  requestedById String      @map("requested_by") @db.Uuid @unique
  invitedUser   User        @relation("friend_invitation", fields: [invitedUserId], references: [id])
  invitedUserId String      @map("invited_user_id") @db.Uuid @unique
  state         FriendRequestState  @default(PENDING)
  createdAt     DateTime    @default(now()) @map("created_at")
}

model Friend {
  id            String      @id @default(uuid()) @db.Uuid
  user          User        @relation("user", fields: [userId], references: [id])
  userId        String      @map("user_id") @db.Uuid @unique
  friend        User        @relation("friend", fields: [friendId], references: [id])
  friendId      String      @map("friend_id") @db.Uuid @unique
  createdAt     DateTime    @default(now()) @map("created_at")
}
