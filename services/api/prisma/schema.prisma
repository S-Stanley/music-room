// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(uuid()) @db.Uuid
  email         String      @unique
  password      String
  token         String?     @db.Uuid @unique
  playlists     Playlist[]
  trackPlaylist TrackPlaylist[]
  votes         TrackVote[]
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @default(now()) @map("updated_at")
}

enum PlaylistType {
  PRIVATE
  PUBLIC
}

model Playlist {
  id            String      @id @default(uuid()) @db.Uuid
  type          PlaylistType
  name          String
  password      String?
  user          User        @relation(fields: [userId], references: [id])
  userId        String      @map("user_id") @db.Uuid
  tracks        TrackPlaylist[]
  votes         TrackVote[]
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @default(now()) @map("updated_at") 
}

model TrackPlaylist {
  id            String      @id @default(uuid()) @db.Uuid
  trackId       String      @map("tracK_id")
  trackTitle    String      @map("track_title")
  trackPreview  String      @map("track_preview")
  albumCover    String      @map("album_cover")
  user          User        @relation(fields: [userId], references: [id])
  userId        String      @map("user_id") @db.Uuid
  playlist      Playlist    @relation(fields: [playlistId], references: [id])
  playlistId    String      @map("playlist_id") @db.Uuid
  votes         TrackVote[]
  position      Int
  alreadyPlayed Boolean     @default(false) @map("already_played")
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @default(now()) @map("updated_at")
}

model TrackVote {
  id            String      @id @default(uuid()) @db.Uuid
  playlist      Playlist    @relation(fields: [playlistId], references: [id])
  playlistId    String      @map("playlist_id") @db.Uuid
  user          User        @relation(fields: [userId], references: [id])
  userId        String      @map("user_id") @db.Uuid
  track         TrackPlaylist @relation(fields: [trackId], references: [id])
  trackId       String      @map("track_id") @db.Uuid
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @default(now()) @map("updated_at") 
}
